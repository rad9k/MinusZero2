using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using m0.Foundation;
using m0.Graph;
using m0.Store;
using m0.Util;


namespace m0
{
    class Program
    {

        static void Main(string[] args)
        {

            m0.Instance.Initialize();

            m0 z = m0.Instance;


            IVertex r = z.Root.AddVertex(null, "0");

            GeneralUtil.ParseAndExcute(r, null, "{\"meta1\"{test1{test11,test12}},meta2{test2},meta3{test3}}");

           /* IVertex meta1 = r.AddVertex(null,"meta1");
            IVertex meta2 = r.AddVertex(null,"meta2");
            IVertex meta3 = r.AddVertex(null,"meta3");*/


            for (int zzz = 0; zzz < 2; zzz++)
                for (int x = 1; x <= 3; x++)
                {
                    IVertex rr = r.AddVertex(GraphUtil.DeepFindOneByValue(r, "meta" + x), "node " + x);

                    for (int xx = 1; xx <= 3; xx++)
                    {
                        IVertex rrr = rr.AddVertex(GraphUtil.DeepFindOneByValue(r, "meta3"), "2node " + xx);

                        for (int xxx = 1; xxx <= 3; xxx++)
                            rrr.AddVertex(GraphUtil.DeepFindOneByValue(r, "meta" + xxx), "3node " + zzz);
                            //rrr.AddVertex(GraphUtil.DeepFindOneByValue(r, "meta" + xxx), "a");
                    }

                }

            Console.WriteLine(z.DefaultGraphCreationCodeGenerator.GraphCreationCodeGenerateAsString(z.Root));
            Console.WriteLine("***");

            //IVertex res = r.GetAll(@"meta1:{meta3:{3node 3},meta3:2node 2{meta1:3node 1}}");

            IVertex res = r.GetAll("{{meta3:3node 1},2node 1}");            
            //IVertex res = r.GetAll("{}");            

            foreach (IEdge e in res)
                Console.WriteLine("- " + e.Meta.Value + ":" + e.To.Value);
 
 

            Console.WriteLine("***STOP");

            Console.ReadLine();

        }
    }
}


